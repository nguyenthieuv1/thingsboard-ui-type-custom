import { AfterViewInit, ElementRef, OnInit } from '@angular/core';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { Store } from '@ngrx/store';
import { AppState } from '@app/core/core.state';
import { TranslateService } from '@ngx-translate/core';
import { EntityId } from '@shared/models/id/entity-id';
import { EntityService } from '@core/http/entity.service';
import { MatAutocomplete, MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';
import { MatChipInputEvent, MatChipGrid } from '@angular/material/chips';
import { DataKeyType } from '@shared/models/telemetry/telemetry.models';
import * as i0 from "@angular/core";
export declare class EntityKeysListComponent implements ControlValueAccessor, OnInit, AfterViewInit {
    private store;
    translate: TranslateService;
    private entityService;
    private fb;
    keysListFormGroup: UntypedFormGroup;
    modelValue: Array<string> | null;
    entityIdValue: EntityId;
    set entityId(entityId: EntityId);
    keysText: string;
    dataKeyType: DataKeyType;
    private requiredValue;
    get required(): boolean;
    set required(value: boolean);
    disabled: boolean;
    keyInput: ElementRef<HTMLInputElement>;
    matAutocomplete: MatAutocomplete;
    chipList: MatChipGrid;
    filteredKeys: Observable<Array<string>>;
    separatorKeysCodes: number[];
    searchText: string;
    private dirty;
    private propagateChange;
    constructor(store: Store<AppState>, translate: TranslateService, entityService: EntityService, fb: UntypedFormBuilder);
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: Array<string> | null): void;
    onFocus(): void;
    addKey(key: string): void;
    add(event: MatChipInputEvent): void;
    remove(key: string): void;
    selected(event: MatAutocompleteSelectedEvent): void;
    displayKeyFn(key?: string): string | undefined;
    fetchKeys(searchText?: string): Observable<Array<string>>;
    clear(value?: string, emitEvent?: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<EntityKeysListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<EntityKeysListComponent, "tb-entity-keys-list", never, { "entityId": "entityId"; "keysText": "keysText"; "dataKeyType": "dataKeyType"; "required": "required"; "disabled": "disabled"; }, {}, never, never, false, never>;
}
