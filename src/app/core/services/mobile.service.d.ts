import { MobileActionResult, WidgetMobileActionResult, WidgetMobileActionType } from '@shared/models/widget.models';
import { Observable } from 'rxjs/internal/Observable';
import { Params, Router } from '@angular/router';
import { AuthService } from '@core/auth/auth.service';
import * as i0 from "@angular/core";
export declare class MobileService {
    private window;
    private router;
    private authService;
    private readonly mobileApp;
    private readonly mobileChannel;
    private readonly onWindowMessageListener;
    private reloadUserObservable;
    private lastDashboardId;
    private toggleLayoutFunction;
    constructor(window: Window, router: Router, authService: AuthService);
    isMobileApp(): boolean;
    handleDashboardStateName(name: string): void;
    onDashboardLoaded(hasRightLayout: boolean, rightLayoutOpened: boolean): void;
    onDashboardRightLayoutChanged(opened: boolean): void;
    registerToggleLayoutFunction(toggleLayoutFunction: () => void): void;
    unregisterToggleLayoutFunction(): void;
    handleWidgetMobileAction<T extends MobileActionResult>(type: WidgetMobileActionType, ...args: any[]): Observable<WidgetMobileActionResult<T>>;
    handleMobileNavigation(path?: string, params?: Params): void;
    private onWindowMessage;
    private openDashboard;
    private doDashboardNavigation;
    private reloadUser;
    static ɵfac: i0.ɵɵFactoryDeclaration<MobileService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MobileService>;
}
