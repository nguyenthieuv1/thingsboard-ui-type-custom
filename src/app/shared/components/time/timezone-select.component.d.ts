import { AfterViewInit, NgZone, OnInit } from '@angular/core';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { MatFormFieldAppearance } from '@angular/material/form-field';
import { Observable } from 'rxjs';
import { Store } from '@ngrx/store';
import { AppState } from '@app/core/core.state';
import { TranslateService } from '@ngx-translate/core';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { TimezoneInfo } from '@shared/models/time/time.models';
import * as i0 from "@angular/core";
export declare class TimezoneSelectComponent implements ControlValueAccessor, OnInit, AfterViewInit {
    private store;
    translate: TranslateService;
    private ngZone;
    private fb;
    selectTimezoneFormGroup: UntypedFormGroup;
    modelValue: string | null;
    defaultTimezoneId: string;
    appearance: MatFormFieldAppearance;
    set defaultTimezone(timezone: string);
    private requiredValue;
    get required(): boolean;
    set required(value: boolean);
    private userTimezoneByDefaultValue;
    get userTimezoneByDefault(): boolean;
    set userTimezoneByDefault(value: boolean);
    private localBrowserTimezonePlaceholderOnEmptyValue;
    get localBrowserTimezonePlaceholderOnEmpty(): boolean;
    set localBrowserTimezonePlaceholderOnEmpty(value: boolean);
    disabled: boolean;
    timezoneInputTrigger: MatAutocompleteTrigger;
    filteredTimezones: Observable<Array<TimezoneInfo>>;
    searchText: string;
    ignoreClosePanel: boolean;
    private dirty;
    private localBrowserTimezoneInfoPlaceholder;
    private timezones;
    private propagateChange;
    constructor(store: Store<AppState>, translate: TranslateService, ngZone: NgZone, fb: UntypedFormBuilder);
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: string | null): void;
    onFocus(): void;
    onPanelClosed(): void;
    updateView(value: string | null): void;
    displayTimezoneFn(timezone?: TimezoneInfo): string | undefined;
    fetchTimezones(searchText?: string): Observable<Array<TimezoneInfo>>;
    clear(): void;
    private loadTimezones;
    private getLocalBrowserTimezoneInfoPlaceholder;
    static ɵfac: i0.ɵɵFactoryDeclaration<TimezoneSelectComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TimezoneSelectComponent, "tb-timezone-select", never, { "appearance": "appearance"; "defaultTimezone": "defaultTimezone"; "required": "required"; "userTimezoneByDefault": "userTimezoneByDefault"; "localBrowserTimezonePlaceholderOnEmpty": "localBrowserTimezonePlaceholderOnEmpty"; "disabled": "disabled"; }, {}, never, never, false, never>;
}
