import { ActivatedRouteSnapshot, Resolve, Router } from '@angular/router';
import { CellActionDescriptor, EntityTableColumn, EntityTableConfig, GroupActionDescriptor, HeaderActionDescriptor } from '@home/models/entity/entities-table-config.models';
import { TranslateService } from '@ngx-translate/core';
import { DatePipe } from '@angular/common';
import { EntityType } from '@shared/models/entity-type.models';
import { EntityAction } from '@home/models/entity/entity-component.models';
import { Observable } from 'rxjs';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { CustomerService } from '@core/http/customer.service';
import { BroadcastService } from '@core/services/broadcast.service';
import { MatDialog } from '@angular/material/dialog';
import { DialogService } from '@core/services/dialog.service';
import { HomeDialogsService } from '@home/dialogs/home-dialogs.service';
import { Edge, EdgeInfo } from '@shared/models/edge.models';
import { EdgeService } from '@core/http/edge.service';
import { EdgeId } from '@shared/models/id/edge-id';
import * as i0 from "@angular/core";
export declare class EdgesTableConfigResolver implements Resolve<EntityTableConfig<EdgeInfo>> {
    private store;
    private broadcast;
    private edgeService;
    private customerService;
    private dialogService;
    private homeDialogs;
    private translate;
    private datePipe;
    private router;
    private dialog;
    private readonly config;
    private customerId;
    constructor(store: Store<AppState>, broadcast: BroadcastService, edgeService: EdgeService, customerService: CustomerService, dialogService: DialogService, homeDialogs: HomeDialogsService, translate: TranslateService, datePipe: DatePipe, router: Router, dialog: MatDialog);
    resolve(route: ActivatedRouteSnapshot): Observable<EntityTableConfig<EdgeInfo>>;
    configureColumns(edgeScope: string): Array<EntityTableColumn<EdgeInfo>>;
    configureEntityFunctions(edgeScope: string): void;
    configureCellActions(edgeScope: string): Array<CellActionDescriptor<EdgeInfo>>;
    configureGroupActions(edgeScope: string): Array<GroupActionDescriptor<EdgeInfo>>;
    configureAddActions(edgeScope: string): Array<HeaderActionDescriptor>;
    importEdges($event: Event): void;
    addEdgesToCustomer($event: Event): void;
    private openEdge;
    makePublic($event: Event, edge: Edge): void;
    openEdgeEntitiesByType($event: Event, edge: Edge, entityType: EntityType): void;
    assignToCustomer($event: Event, edgesIds: Array<EdgeId>): void;
    unassignFromCustomer($event: Event, edge: EdgeInfo): void;
    unassignEdgesFromCustomer($event: Event, edges: Array<EdgeInfo>): void;
    syncEdge($event: any, edge: any): void;
    addEdge(): void;
    openInstructions($event: any, edge: EdgeInfo, afterAdd?: boolean): void;
    onEdgeAction(action: EntityAction<EdgeInfo>, config: EntityTableConfig<EdgeInfo>): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<EdgesTableConfigResolver, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<EdgesTableConfigResolver>;
}
