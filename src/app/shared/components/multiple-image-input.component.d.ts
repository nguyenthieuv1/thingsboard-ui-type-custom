import { AfterViewInit, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { PageComponent } from '@shared/components/page.component';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { ControlValueAccessor } from '@angular/forms';
import { Subscription } from 'rxjs';
import { DropDirective, FlowDirective } from '@flowjs/ngx-flow';
import { DomSanitizer, SafeUrl } from '@angular/platform-browser';
import { UtilsService } from '@core/services/utils.service';
import { DialogService } from '@core/services/dialog.service';
import { TranslateService } from '@ngx-translate/core';
import { FileSizePipe } from '@shared/pipe/file-size.pipe';
import { DndDropEvent } from 'ngx-drag-drop';
import * as i0 from "@angular/core";
export declare class MultipleImageInputComponent extends PageComponent implements AfterViewInit, OnDestroy, ControlValueAccessor {
    protected store: Store<AppState>;
    private utils;
    private sanitizer;
    private dialog;
    private translate;
    private fileSize;
    private cd;
    label: string;
    maxSizeByte: number;
    private requiredValue;
    get required(): boolean;
    set required(value: boolean);
    disabled: boolean;
    inputId: string;
    imageUrls: string[];
    safeImageUrls: SafeUrl[];
    dragIndex: number;
    flow: FlowDirective;
    flowDrop: DropDirective;
    autoUploadSubscription: Subscription;
    private propagateChange;
    private viewInited;
    constructor(store: Store<AppState>, utils: UtilsService, sanitizer: DomSanitizer, dialog: DialogService, translate: TranslateService, fileSize: FileSizePipe, cd: ChangeDetectorRef);
    ngAfterViewInit(): void;
    private readImageUrl;
    ngOnDestroy(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: string[]): void;
    private updateModel;
    clearImage(index: number): void;
    imageDragStart(index: number): void;
    imageDragEnd(): void;
    imageDrop(event: DndDropEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MultipleImageInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MultipleImageInputComponent, "tb-multiple-image-input", never, { "label": "label"; "maxSizeByte": "maxSizeByte"; "required": "required"; "disabled": "disabled"; "inputId": "inputId"; }, {}, never, never, false, never>;
}
