import { OnInit } from '@angular/core';
import { AbstractControl, ControlValueAccessor, UntypedFormArray, UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, ValidationErrors, Validator } from '@angular/forms';
import { AlarmSchedule, AlarmScheduleType } from '@shared/models/device.models';
import { MatCheckboxChange } from '@angular/material/checkbox';
import * as i0 from "@angular/core";
export declare class AlarmScheduleComponent implements ControlValueAccessor, Validator, OnInit {
    private fb;
    disabled: boolean;
    alarmScheduleForm: UntypedFormGroup;
    alarmScheduleTypes: string[];
    alarmScheduleType: typeof AlarmScheduleType;
    alarmScheduleTypeTranslate: Map<AlarmScheduleType, string>;
    dayOfWeekTranslationsArray: string[];
    allDays: number[];
    firstRowDays: number[];
    secondRowDays: number[];
    private modelValue;
    private defaultItems;
    private propagateChange;
    constructor(fb: UntypedFormBuilder);
    ngOnInit(): void;
    validateDayOfWeeks(control: AbstractControl): ValidationErrors | null;
    validateItems(control: AbstractControl): ValidationErrors | null;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: AlarmSchedule): void;
    validate(control: UntypedFormGroup): ValidationErrors | null;
    weeklyRepeatControl(index: number): UntypedFormControl;
    private updateValidators;
    private updateModel;
    private defaultItemsScheduler;
    changeCustomScheduler($event: MatCheckboxChange, index: number): void;
    private disabledSelectedTime;
    getSchedulerRangeText(control: UntypedFormGroup | AbstractControl): string;
    get itemsSchedulerForm(): UntypedFormArray;
    static ɵfac: i0.ɵɵFactoryDeclaration<AlarmScheduleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AlarmScheduleComponent, "tb-alarm-schedule", never, { "disabled": "disabled"; }, {}, never, never, false, never>;
}
