import { ElementRef, OnInit } from '@angular/core';
import { ControlValueAccessor, FormBuilder, FormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { TranslateService } from '@ngx-translate/core';
import { EntityId } from '@shared/models/id/entity-id';
import { BaseData } from '@shared/models/base-data';
import { EntityService } from '@core/http/entity.service';
import { TruncatePipe } from '@shared/pipe/truncate.pipe';
import { QueueInfo, ServiceType } from '@shared/models/queue.models';
import { QueueService } from '@core/http/queue.service';
import { SubscriptSizing } from '@angular/material/form-field';
import * as i0 from "@angular/core";
export declare class QueueAutocompleteComponent implements ControlValueAccessor, OnInit {
    private store;
    translate: TranslateService;
    truncate: TruncatePipe;
    private entityService;
    private queueService;
    private fb;
    selectQueueFormGroup: FormGroup;
    modelValue: string | null;
    labelText: string;
    requiredText: string;
    autocompleteHint: string;
    subscriptSizing: SubscriptSizing;
    private requiredValue;
    get required(): boolean;
    set required(value: boolean);
    queueType: ServiceType;
    disabled: boolean;
    queueInput: ElementRef;
    filteredQueues: Observable<Array<BaseData<EntityId>>>;
    searchText: string;
    private dirty;
    private propagateChange;
    constructor(store: Store<AppState>, translate: TranslateService, truncate: TruncatePipe, entityService: EntityService, queueService: QueueService, fb: FormBuilder);
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngOnInit(): void;
    setDisabledState(isDisabled: boolean): void;
    textIsNotEmpty(text: string): boolean;
    writeValue(value: string | null): void;
    onFocus(): void;
    reset(): void;
    updateView(value: string | null): void;
    displayQueueFn(queue?: BaseData<EntityId>): string | undefined;
    fetchQueue(searchText?: string): Observable<Array<QueueInfo>>;
    getDescription(value: any): any;
    clear(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<QueueAutocompleteComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<QueueAutocompleteComponent, "tb-queue-autocomplete", never, { "labelText": "labelText"; "requiredText": "requiredText"; "autocompleteHint": "autocompleteHint"; "subscriptSizing": "subscriptSizing"; "required": "required"; "queueType": "queueType"; "disabled": "disabled"; }, {}, never, never, false, never>;
}
