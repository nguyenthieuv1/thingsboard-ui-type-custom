import { ChangeDetectorRef, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { EntityId } from '@shared/models/id/entity-id';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { AttributeService } from '@core/http/attribute.service';
import { DeviceService } from '@core/http/device.service';
import { GatewayLogLevel, LocalLogsConfigs, LogSavingPeriod, SecurityTypes, StorageTypes } from './gateway-widget.models';
import * as i0 from "@angular/core";
export declare class GatewayConfigurationComponent implements OnInit {
    private fb;
    private attributeService;
    private deviceService;
    private cd;
    private dialog;
    gatewayConfigGroup: FormGroup;
    StorageTypes: typeof StorageTypes;
    storageTypes: StorageTypes[];
    storageTypesTranslationMap: Map<StorageTypes, string>;
    logSavingPeriods: Map<LogSavingPeriod, string>;
    localLogsConfigs: LocalLogsConfigs[];
    localLogsConfigTranslateMap: Map<LocalLogsConfigs, string>;
    securityTypes: Map<SecurityTypes, string>;
    gatewayLogLevel: GatewayLogLevel[];
    device: EntityId;
    dialogRef: MatDialogRef<any>;
    logSelector: FormControl;
    private initialCredentials;
    constructor(fb: FormBuilder, attributeService: AttributeService, deviceService: DeviceService, cd: ChangeDetectorRef, dialog: MatDialog);
    ngOnInit(): void;
    private atLeastOneRequired;
    private fetchConfigAttribute;
    private checkAndFetchCredentials;
    private logsToObj;
    private toggleRpcFields;
    addCommand(command?: any): void;
    private addLocalLogConfig;
    getLogFormGroup(value: string): FormGroup;
    commandFormArray(): FormArray;
    removeCommandControl(index: number, event: any): void;
    private removeAllSecurityValidators;
    private removeAllStorageValidators;
    private removeEmpty;
    private generateLogsFile;
    private createHandlerObj;
    private createLoggerObj;
    saveConfig(): void;
    private updateCredentials;
    cancel(): void;
    private openConfigurationConfirmDialog;
    static ɵfac: i0.ɵɵFactoryDeclaration<GatewayConfigurationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GatewayConfigurationComponent, "tb-gateway-configuration", never, { "device": "device"; "dialogRef": "dialogRef"; }, {}, never, never, false, never>;
}
