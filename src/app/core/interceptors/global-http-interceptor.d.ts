import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs/internal/Observable';
import { AuthService } from '@core/auth/auth.service';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { DialogService } from '@core/services/dialog.service';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
export declare class GlobalHttpInterceptor implements HttpInterceptor {
    private store;
    private dialogService;
    private translate;
    private authService;
    private AUTH_SCHEME;
    private AUTH_HEADER_NAME;
    private internalUrlPrefixes;
    private activeRequests;
    constructor(store: Store<AppState>, dialogService: DialogService, translate: TranslateService, authService: AuthService);
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    private jwtIntercept;
    private handleRequest;
    private handleResponseError;
    private retryRequest;
    private refreshTokenAndRetry;
    private updateAuthorizationHeader;
    private isInternalUrlPrefix;
    private isTokenBasedAuthEntryPoint;
    private updateLoadingState;
    private getInterceptorConfig;
    private showError;
    static ɵfac: i0.ɵɵFactoryDeclaration<GlobalHttpInterceptor, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<GlobalHttpInterceptor>;
}
