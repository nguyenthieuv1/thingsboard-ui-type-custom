import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { AbstractControl, ControlValueAccessor, UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, ValidationErrors } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { WidgetConfigComponent } from '@home/components/widget/widget-config.component';
import { DataKey, DatasourceType, JsonSettingsSchema, Widget, widgetType } from '@shared/models/widget.models';
import { DataKeysPanelComponent } from '@home/components/widget/config/basic/common/data-keys-panel.component';
import { DataKeyType } from '@shared/models/telemetry/telemetry.models';
import { MatChipGrid, MatChipInputEvent } from '@angular/material/chips';
import { DataKeysCallbacks } from '@home/components/widget/config/data-keys.component.models';
import { MatAutocomplete, MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { Observable } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';
import { TruncatePipe } from '@shared/pipe/truncate.pipe';
import { Dashboard } from '@shared/models/dashboard.models';
import { IAliasController } from '@core/api/widget-api.models';
import * as i0 from "@angular/core";
export declare const dataKeyRowValidator: (control: AbstractControl) => ValidationErrors | null;
export declare class DataKeyRowComponent implements ControlValueAccessor, OnInit, OnChanges {
    private fb;
    private dialog;
    private cd;
    translate: TranslateService;
    truncate: TruncatePipe;
    private dataKeysPanelComponent;
    private widgetConfigComponent;
    dataKeyTypes: typeof DataKeyType;
    widgetTypes: typeof widgetType;
    separatorKeysCodes: number[];
    keyInput: ElementRef<HTMLInputElement>;
    matAutocomplete: MatAutocomplete;
    autocomplete: MatAutocompleteTrigger;
    chipList: MatChipGrid;
    disabled: boolean;
    datasourceType: DatasourceType;
    entityAliasId: string;
    deviceId: string;
    keyRemoved: EventEmitter<any>;
    keyFormControl: UntypedFormControl;
    keyRowFormGroup: UntypedFormGroup;
    modelValue: DataKey;
    filteredKeys: Observable<Array<DataKey>>;
    keySearchText: string;
    private latestKeySearchTextResult;
    private keyFetchObservable$;
    get dataKeyType(): DataKeyType;
    get alarmKeys(): Array<DataKey>;
    get functionTypeKeys(): Array<DataKey>;
    get hideDataKeyColor(): boolean;
    get hideUnits(): boolean;
    get hideDecimals(): boolean;
    get widgetType(): widgetType;
    get callbacks(): DataKeysCallbacks;
    get hasAdditionalLatestDataKeys(): boolean;
    get widget(): Widget;
    get dashboard(): Dashboard;
    get aliasController(): IAliasController;
    get dataKeySettingsSchema(): JsonSettingsSchema;
    get dataKeySettingsDirective(): string;
    get latestDataKeySettingsSchema(): JsonSettingsSchema;
    get latestDataKeySettingsDirective(): string;
    get isEntityDatasource(): boolean;
    get displayUnitsOrDigits(): boolean;
    get keySettingsTitle(): string;
    get removeKeyTitle(): string;
    get dragEnabled(): boolean;
    get isLatestDataKeys(): boolean;
    private propagateChange;
    constructor(fb: UntypedFormBuilder, dialog: MatDialog, cd: ChangeDetectorRef, translate: TranslateService, truncate: TruncatePipe, dataKeysPanelComponent: DataKeysPanelComponent, widgetConfigComponent: WidgetConfigComponent);
    ngOnInit(): void;
    private reset;
    ngOnChanges(changes: SimpleChanges): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: DataKey): void;
    dataKeyHasAggregation(): boolean;
    dataKeyHasPostprocessing(): boolean;
    displayKeyFn(key?: DataKey): string | undefined;
    createKey(name: string, dataKeyType?: DataKeyType): void;
    addKey(event: MatChipInputEvent): void;
    editKey(advanced?: boolean): void;
    removeKey(): void;
    textIsNotEmpty(text: string): boolean;
    clearKeyChip(value?: string, focus?: boolean): void;
    onKeyInputFocus(): void;
    private fetchKeys;
    private getKeys;
    private createDataKeyFilter;
    private addKeyFromChipValue;
    private clearKeySearchCache;
    private updateModel;
    static ɵfac: i0.ɵɵFactoryDeclaration<DataKeyRowComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DataKeyRowComponent, "tb-data-key-row", never, { "disabled": "disabled"; "datasourceType": "datasourceType"; "entityAliasId": "entityAliasId"; "deviceId": "deviceId"; }, { "keyRemoved": "keyRemoved"; }, never, never, false, never>;
}
