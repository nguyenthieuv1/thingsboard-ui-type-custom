import { AfterViewInit, ElementRef, OnInit } from '@angular/core';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { PageData } from '@shared/models/page/page-data';
import { Store } from '@ngrx/store';
import { AppState } from '@app/core/core.state';
import { TranslateService } from '@ngx-translate/core';
import { EntityInfo } from '@shared/models/entity.models';
import { EntityFilter } from '@shared/models/query/query.models';
import { EntityService } from '@core/http/entity.service';
import * as i0 from "@angular/core";
export declare class AliasesEntityAutocompleteComponent implements ControlValueAccessor, OnInit, AfterViewInit {
    private store;
    translate: TranslateService;
    private entityService;
    private fb;
    selectEntityInfoFormGroup: UntypedFormGroup;
    modelValue: EntityInfo | null;
    alias: string;
    entityFilter: EntityFilter;
    private requiredValue;
    get required(): boolean;
    set required(value: boolean);
    disabled: boolean;
    entityInfoInput: ElementRef;
    filteredEntityInfos: Observable<Array<EntityInfo>>;
    searchText: string;
    private propagateChange;
    constructor(store: Store<AppState>, translate: TranslateService, entityService: EntityService, fb: UntypedFormBuilder);
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: EntityInfo | null): void;
    updateView(value: EntityInfo | null): void;
    displayEntityInfoFn(entityInfo?: EntityInfo): string | undefined;
    fetchEntityInfos(searchText?: string): Observable<Array<EntityInfo>>;
    getEntityInfos(searchText: string): Observable<PageData<EntityInfo>>;
    clear(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AliasesEntityAutocompleteComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AliasesEntityAutocompleteComponent, "tb-aliases-entity-autocomplete", never, { "alias": "alias"; "entityFilter": "entityFilter"; "required": "required"; "disabled": "disabled"; }, {}, never, never, false, never>;
}
