import { ElementRef, OnInit } from '@angular/core';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { Observable } from 'rxjs';
import { EntityService } from '@core/http/entity.service';
import { Device } from '@shared/models/device.models';
import { DialogService } from '@core/services/dialog.service';
import { TranslateService } from '@ngx-translate/core';
import { DeviceService } from '@core/http/device.service';
import * as i0 from "@angular/core";
export declare class EntityGatewaySelectComponent implements ControlValueAccessor, OnInit {
    private store;
    private entityService;
    private dialogService;
    private deviceService;
    private translate;
    private fb;
    get required(): boolean;
    set required(value: boolean);
    set newGatewayType(value: string);
    deviceName: string;
    isStateForm: boolean;
    private gatewayNameExist;
    constructor(store: Store<AppState>, entityService: EntityService, dialogService: DialogService, deviceService: DeviceService, translate: TranslateService, fb: UntypedFormBuilder);
    private gatewayType;
    private dirty;
    private requiredValue;
    private gatewayList;
    searchText: string;
    filteredGateways: Observable<Array<Device>>;
    selectDeviceGatewayFormGroup: UntypedFormGroup;
    modelValue: string | null;
    deviceGatewayInput: ElementRef<HTMLInputElement>;
    private propagateChange;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngOnInit(): void;
    fetchGateway(searchText?: string): Observable<Array<Device>>;
    onFocus(): void;
    displayGatewayFn(gateway?: Device): string | undefined;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: string | null): void;
    clear(value?: string, hideList?: boolean): void;
    textIsNotEmpty(text: string): boolean;
    gatewayNameEnter($event: KeyboardEvent): void;
    createGateway($event: Event, gatewayName: string): void;
    private createDeviceGateway;
    private loadGatewayList;
    private updateView;
    static ɵfac: i0.ɵɵFactoryDeclaration<EntityGatewaySelectComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<EntityGatewaySelectComponent, "tb-entity-gateway-select", never, { "required": "required"; "newGatewayType": "newGatewayType"; "deviceName": "deviceName"; "isStateForm": "isStateForm"; }, { "gatewayNameExist": "gatewayNameExist"; }, never, never, false, never>;
}
