import { ElementRef, NgZone, OnDestroy, OnInit } from '@angular/core';
import { PageComponent } from '@shared/components/page.component';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { AbstractControl, UntypedFormArray, UntypedFormBuilder, UntypedFormGroup, NgForm } from '@angular/forms';
import { WidgetContext } from '@home/models/widget-component.models';
import { UtilsService } from '@core/services/utils.service';
import { SecurityType, StorageType } from './gateway-form.models';
import { MatDialog } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';
import { DeviceService } from '@core/http/device.service';
import { AttributeService } from '@core/http/attribute.service';
import { ImportExportService } from '@home/components/import-export/import-export.service';
import * as i0 from "@angular/core";
export declare class GatewayFormComponent extends PageComponent implements OnInit, OnDestroy {
    protected store: Store<AppState>;
    private elementRef;
    private utils;
    private ngZone;
    private fb;
    private window;
    private dialog;
    private translate;
    private deviceService;
    private attributeService;
    private importExport;
    constructor(store: Store<AppState>, elementRef: ElementRef, utils: UtilsService, ngZone: NgZone, fb: UntypedFormBuilder, window: Window, dialog: MatDialog, translate: TranslateService, deviceService: DeviceService, attributeService: AttributeService, importExport: ImportExportService);
    get connectors(): UntypedFormArray;
    formContainerRef: ElementRef<HTMLElement>;
    multipleInputForm: NgForm;
    private successfulSaved;
    private gatewayNameExists;
    private archiveFileName;
    private formResize$;
    private subscribeStorageType$;
    private subscribeGateway$;
    alignment: string;
    layoutGap: string;
    gatewayType: string;
    gatewayConfigurationGroup: UntypedFormGroup;
    securityTypes: Map<SecurityType, string>;
    gatewayLogLevels: any[];
    connectorTypes: string[];
    storageTypes: Map<StorageType, string>;
    toastTargetId: string;
    ctx: WidgetContext;
    isStateForm: boolean;
    isReadOnlyForm: boolean;
    deviceNameForm: string;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private initWidgetSettings;
    private resize;
    private updateWidgetDisplaying;
    private saveAttribute;
    private createConnector;
    private getFormField;
    private buildForm;
    gatewayExist(): void;
    exportConfig(): void;
    addNewConnector(): void;
    removeConnector(index: number): void;
    openConfigDialog($event: Event, index: number, config: object, type: string): void;
    private createConnectorName;
    private validateConnectorName;
    changeConnectorType(connector: AbstractControl): void;
    changeConnectorName(connector: AbstractControl, index: number): void;
    save(): void;
    private getAttributes;
    private getAttribute;
    private setFormGatewaySettings;
    private setFormConnectorsDraft;
    private processLoggingLevel;
    static ɵfac: i0.ɵɵFactoryDeclaration<GatewayFormComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GatewayFormComponent, "tb-gateway-form", never, { "ctx": "ctx"; "isStateForm": "isStateForm"; }, {}, never, never, false, never>;
}
