import { RequestConfig } from './http-utils';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { PageLink } from '@shared/models/page/page-link';
import { PageData } from '@shared/models/page/page-data';
import { Dashboard, DashboardInfo, HomeDashboard, HomeDashboardInfo } from '@shared/models/dashboard.models';
import { Router } from '@angular/router';
import * as i0 from "@angular/core";
export declare class DashboardService {
    private http;
    private router;
    private window;
    stDiffObservable: Observable<number>;
    currentUrl: string;
    constructor(http: HttpClient, router: Router, window: Window);
    getTenantDashboards(pageLink: PageLink, config?: RequestConfig): Observable<PageData<DashboardInfo>>;
    getTenantDashboardsByTenantId(tenantId: string, pageLink: PageLink, config?: RequestConfig): Observable<PageData<DashboardInfo>>;
    getCustomerDashboards(customerId: string, pageLink: PageLink, config?: RequestConfig): Observable<PageData<DashboardInfo>>;
    getDashboard(dashboardId: string, config?: RequestConfig): Observable<Dashboard>;
    getDashboardInfo(dashboardId: string, config?: RequestConfig): Observable<DashboardInfo>;
    saveDashboard(dashboard: Dashboard, config?: RequestConfig): Observable<Dashboard>;
    deleteDashboard(dashboardId: string, config?: RequestConfig): Observable<Object>;
    assignDashboardToCustomer(customerId: string, dashboardId: string, config?: RequestConfig): Observable<Dashboard>;
    unassignDashboardFromCustomer(customerId: string, dashboardId: string, config?: RequestConfig): Observable<Object>;
    makeDashboardPublic(dashboardId: string, config?: RequestConfig): Observable<Dashboard>;
    makeDashboardPrivate(dashboardId: string, config?: RequestConfig): Observable<Dashboard>;
    updateDashboardCustomers(dashboardId: string, customerIds: Array<string>, config?: RequestConfig): Observable<Dashboard>;
    addDashboardCustomers(dashboardId: string, customerIds: Array<string>, config?: RequestConfig): Observable<Dashboard>;
    removeDashboardCustomers(dashboardId: string, customerIds: Array<string>, config?: RequestConfig): Observable<Dashboard>;
    getHomeDashboard(config?: RequestConfig): Observable<HomeDashboard>;
    getTenantHomeDashboardInfo(config?: RequestConfig): Observable<HomeDashboardInfo>;
    setTenantHomeDashboardInfo(homeDashboardInfo: HomeDashboardInfo, config?: RequestConfig): Observable<any>;
    getPublicDashboardLink(dashboard: DashboardInfo): string | null;
    getServerTimeDiff(): Observable<number>;
    getEdgeDashboards(edgeId: string, pageLink: PageLink, type?: string, config?: RequestConfig): Observable<PageData<DashboardInfo>>;
    assignDashboardToEdge(edgeId: string, dashboardId: string, config?: RequestConfig): Observable<Dashboard>;
    unassignDashboardFromEdge(edgeId: string, dashboardId: string, config?: RequestConfig): Observable<Object>;
    static ɵfac: i0.ɵɵFactoryDeclaration<DashboardService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<DashboardService>;
}
