import { AfterViewInit, ElementRef, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { Store } from '@ngrx/store';
import { AppState } from '@app/core/core.state';
import { TranslateService } from '@ngx-translate/core';
import { MessageType } from '@shared/models/rule-node.models';
import * as i0 from "@angular/core";
export declare class MessageTypeAutocompleteComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnDestroy {
    private store;
    translate: TranslateService;
    private fb;
    messageTypeFormGroup: UntypedFormGroup;
    modelValue: string | null;
    private requiredValue;
    get required(): boolean;
    set required(value: boolean);
    disabled: boolean;
    messageTypeInput: ElementRef;
    filteredMessageTypes: Observable<Array<MessageType | string>>;
    searchText: string;
    private dirty;
    private propagateChange;
    constructor(store: Store<AppState>, translate: TranslateService, fb: UntypedFormBuilder);
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: string | null): void;
    onFocus(): void;
    updateView(value: MessageType | string | null): void;
    displayMessageTypeFn(messageType?: MessageType | string): string | undefined;
    fetchMessageTypes(searchText?: string): Observable<Array<MessageType | string>>;
    clear(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MessageTypeAutocompleteComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MessageTypeAutocompleteComponent, "tb-message-type-autocomplete", never, { "required": "required"; "disabled": "disabled"; }, {}, never, never, false, never>;
}
