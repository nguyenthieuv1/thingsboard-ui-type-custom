import { ElementRef, OnInit } from '@angular/core';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { TranslateService } from '@ngx-translate/core';
import { EntityId } from '@shared/models/id/entity-id';
import { BaseData } from '@shared/models/base-data';
import { EntityService } from '@core/http/entity.service';
import { TruncatePipe } from '@shared/pipe/truncate.pipe';
import { RuleChainService } from '@core/http/rule-chain.service';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { RuleChainType } from '@app/shared/models/rule-chain.models';
import * as i0 from "@angular/core";
export declare class RuleChainAutocompleteComponent implements ControlValueAccessor, OnInit {
    private store;
    translate: TranslateService;
    truncate: TruncatePipe;
    private entityService;
    private ruleChainService;
    private fb;
    selectRuleChainFormGroup: UntypedFormGroup;
    modelValue: string | null;
    labelText: string;
    requiredText: string;
    ruleChainType: RuleChainType;
    private requiredValue;
    get required(): boolean;
    set required(value: boolean);
    disabled: boolean;
    ruleChainInput: ElementRef;
    ruleChainAutocomplete: MatAutocompleteTrigger;
    filteredRuleChains: Observable<Array<BaseData<EntityId>>>;
    searchText: string;
    private dirty;
    private propagateChange;
    constructor(store: Store<AppState>, translate: TranslateService, truncate: TruncatePipe, entityService: EntityService, ruleChainService: RuleChainService, fb: UntypedFormBuilder);
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    getCurrentEntity(): BaseData<EntityId> | null;
    setDisabledState(isDisabled: boolean): void;
    textIsNotEmpty(text: string): boolean;
    writeValue(value: string | null): void;
    onFocus(): void;
    reset(): void;
    updateView(value: string | null): void;
    displayRuleChainFn(ruleChain?: BaseData<EntityId>): string | undefined;
    fetchRuleChain(searchText?: string): Observable<Array<BaseData<EntityId>>>;
    clear(): void;
    createDefaultRuleChain($event: Event, ruleChainName: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RuleChainAutocompleteComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RuleChainAutocompleteComponent, "tb-rule-chain-autocomplete", never, { "labelText": "labelText"; "requiredText": "requiredText"; "ruleChainType": "ruleChainType"; "required": "required"; "disabled": "disabled"; }, {}, never, ["[tb-hint]"], false, never>;
}
