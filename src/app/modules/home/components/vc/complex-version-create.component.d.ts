import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { PageComponent } from '@shared/components/page.component';
import { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { SyncStrategy, VersionCreationResult } from '@shared/models/vc.models';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { EntitiesVersionControlService } from '@core/http/entities-version-control.service';
import { TranslateService } from '@ngx-translate/core';
import { TbPopoverComponent } from '@shared/components/popover.component';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class ComplexVersionCreateComponent extends PageComponent implements OnInit, OnDestroy {
    protected store: Store<AppState>;
    private entitiesVersionControlService;
    private cd;
    private sanitizer;
    private translate;
    private fb;
    branch: string;
    onClose: (result: VersionCreationResult | null, branch: string | null) => void;
    popoverComponent: TbPopoverComponent;
    createVersionFormGroup: UntypedFormGroup;
    syncStrategies: SyncStrategy[];
    syncStrategyTranslations: Map<SyncStrategy, string>;
    syncStrategyHints: Map<SyncStrategy, string>;
    resultMessage: SafeHtml;
    hasError: boolean;
    versionCreateResult: VersionCreationResult;
    versionCreateBranch: string;
    versionCreateResult$: Observable<VersionCreationResult>;
    private versionCreateResultSubscription;
    constructor(store: Store<AppState>, entitiesVersionControlService: EntitiesVersionControlService, cd: ChangeDetectorRef, sanitizer: DomSanitizer, translate: TranslateService, fb: UntypedFormBuilder);
    ngOnInit(): void;
    ngOnDestroy(): void;
    cancel(): void;
    export(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ComplexVersionCreateComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ComplexVersionCreateComponent, "tb-complex-version-create", never, { "branch": "branch"; "onClose": "onClose"; "popoverComponent": "popoverComponent"; }, {}, never, never, false, never>;
}
