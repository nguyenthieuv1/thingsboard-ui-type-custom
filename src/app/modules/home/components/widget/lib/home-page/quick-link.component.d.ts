import { ElementRef, EventEmitter, OnInit } from '@angular/core';
import { AbstractControl, ControlValueAccessor, FormGroupDirective, NgForm, UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, ValidationErrors } from '@angular/forms';
import { PageComponent } from '@shared/components/page.component';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { ErrorStateMatcher } from '@angular/material/core';
import { MenuService } from '@core/services/menu.service';
import { Observable } from 'rxjs';
import { MenuSection } from '@core/services/menu.models';
import { TranslateService } from '@ngx-translate/core';
import { PageLink } from '@shared/models/page/page-link';
import { PageData } from '@shared/models/page/page-data';
import * as i0 from "@angular/core";
export declare class QuickLinkComponent extends PageComponent implements OnInit, ControlValueAccessor, ErrorStateMatcher {
    protected store: Store<AppState>;
    private fb;
    private menuService;
    translate: TranslateService;
    private errorStateMatcher;
    disabled: boolean;
    addOnly: boolean;
    disableEdit: boolean;
    quickLinkAdded: EventEmitter<string>;
    quickLinkAddCanceled: EventEmitter<void>;
    quickLinkUpdated: EventEmitter<string>;
    quickLinkDeleted: EventEmitter<void>;
    editModeChanged: EventEmitter<boolean>;
    linkInput: ElementRef;
    filteredLinks: Observable<Array<MenuSection>>;
    private allLinksObservable$;
    searchText: string;
    editMode: boolean;
    addMode: boolean;
    quickLink: MenuSection;
    private propagateChange;
    editQuickLinkFormGroup: UntypedFormGroup;
    private submitted;
    private dirty;
    constructor(store: Store<AppState>, fb: UntypedFormBuilder, menuService: MenuService, translate: TranslateService, errorStateMatcher: ErrorStateMatcher);
    ngOnInit(): void;
    requiredLinkValidator(control: AbstractControl): ValidationErrors | null;
    isErrorState(control: UntypedFormControl | null, form: FormGroupDirective | NgForm | null): boolean;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: string): void;
    updateView(value: MenuSection | null): void;
    displayLinkFn: (link?: MenuSection) => string | undefined;
    fetchLinks(searchText?: string): Observable<Array<MenuSection>>;
    getLinks(pageLink: PageLink): Observable<PageData<MenuSection>>;
    allLinks(): Observable<Array<MenuSection>>;
    onFocus(): void;
    clear(): void;
    switchToEditMode(): void;
    apply(): void;
    cancelEdit(): void;
    add(): void;
    cancelAdd(): void;
    delete(): void;
    isEditing(): boolean;
    private updateModel;
    static ɵfac: i0.ɵɵFactoryDeclaration<QuickLinkComponent, [null, null, null, null, { skipSelf: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<QuickLinkComponent, "tb-quick-link", never, { "disabled": "disabled"; "addOnly": "addOnly"; "disableEdit": "disableEdit"; }, { "quickLinkAdded": "quickLinkAdded"; "quickLinkAddCanceled": "quickLinkAddCanceled"; "quickLinkUpdated": "quickLinkUpdated"; "quickLinkDeleted": "quickLinkDeleted"; "editModeChanged": "editModeChanged"; }, never, never, false, never>;
}
